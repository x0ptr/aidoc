name: build

on:
  push:
    tags: ["v*"]
  pull_request:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { goos: linux, goarch: amd64 }
          - { goos: linux, goarch: arm64 }
          - { goos: darwin, goarch: amd64 }
          - { goos: darwin, goarch: arm64 }
          - { goos: windows, goarch: amd64 }
          - { goos: windows, goarch: arm64 }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"
          cache: true

      # If you use CGO, remove this or provide cross toolchains.
      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          BIN_NAME="aidoc"
          EXT=""
          if [ "${GOOS}" = "windows" ]; then EXT=".exe"; fi
          OUT="dist/${BIN_NAME}-${GOOS}-${GOARCH}${EXT}"

          # Adjust ./cmd/aidoc to your main package if needed (./ if main.go at repo root)
          go build -trimpath -ldflags "-s -w" -o "${OUT}" ./cmd/aidoc

          # Zip it (always .zip as requested)
          (cd dist && zip "${BIN_NAME}-${GOOS}-${GOARCH}.zip" "$(basename "${OUT}")")

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: aidoc-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/aidoc-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          if-no-files-found: error

  release:
    # Only run on tags starting with v (e.g., v1.2.3)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release and upload zips
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
